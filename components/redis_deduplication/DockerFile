# components/redis-deduplication/Dockerfile
# Multi-stage build for Redis Deduplication component

# Build stage
FROM debian:bookworm-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    git \
    pkg-config \
    libhiredis-dev \
    libboost-dev \
    libboost-system-dev \
    libboost-thread-dev \
    libspdlog-dev \
    libfmt-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /workspace

# Copy source code
COPY include/ include/
COPY src/ src/
COPY example/ example/
COPY test/ test/
COPY CMakeLists.txt .
COPY cmake/ cmake/

# Create build directory and configure
RUN mkdir build && cd build && \
    cmake -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DENABLE_TESTING=ON \
    -DENABLE_EXAMPLES=ON \
    -DCMAKE_INSTALL_PREFIX=/opt/redis-deduplication \
    ..

# Build the project
RUN cd build && ninja -j$(nproc)

# Run tests
RUN cd build && ctest --output-on-failure

# Install to staging directory
RUN cd build && ninja install

# Runtime stage using distroless
FROM gcr.io/distroless/cc-debian12:latest AS runtime

# Copy built artifacts from builder stage
COPY --from=builder /opt/redis-deduplication/lib/ /usr/local/lib/
COPY --from=builder /opt/redis-deduplication/include/ /usr/local/include/
COPY --from=builder /opt/redis-deduplication/bin/ /usr/local/bin/

# Copy system libraries that may be needed
COPY --from=builder /usr/lib/x86_64-linux-gnu/libhiredis.so* /usr/lib/x86_64-linux-gnu/
COPY --from=builder /usr/lib/x86_64-linux-gnu/libboost_system.so* /usr/lib/x86_64-linux-gnu/
COPY --from=builder /usr/lib/x86_64-linux-gnu/libboost_thread.so* /usr/lib/x86_64-linux-gnu/
COPY --from=builder /usr/lib/x86_64-linux-gnu/libspdlog.so* /usr/lib/x86_64-linux-gnu/
COPY --from=builder /usr/lib/x86_64-linux-gnu/libfmt.so* /usr/lib/x86_64-linux-gnu/

# Set library path
ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/x86_64-linux-gnu

# Default command (can be overridden)
ENTRYPOINT ["/usr/local/bin/simple_deduplication"]

# Alternative runtime stage using debian-slim (if distroless doesn't work)
FROM debian:bookworm-slim AS runtime-slim

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    libhiredis1.1.0 \
    libboost-system1.81.0 \
    libboost-thread1.81.0 \
    libspdlog1 \
    libfmt9 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r dedupe && useradd -r -g dedupe dedupe

# Copy built artifacts from builder stage
COPY --from=builder /opt/redis-deduplication/lib/ /usr/local/lib/
COPY --from=builder /opt/redis-deduplication/include/ /usr/local/include/
COPY --from=builder /opt/redis-deduplication/bin/ /usr/local/bin/

# Update library cache
RUN ldconfig

# Switch to non-root user
USER dedupe

# Set working directory
WORKDIR /app

# Default command
ENTRYPOINT ["/usr/local/bin/simple_deduplication"]

# Development stage (includes build tools and source)
FROM builder AS development

# Install additional development tools
RUN apt-get update && apt-get install -y \
    gdb \
    valgrind \
    clang-format \
    clang-tidy \
    doxygen \
    graphviz \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /workspace

# Default command for development
CMD ["/bin/bash"]

# Labels for metadata
LABEL maintainer="UDP Gateway Project <dev@example.com>"
LABEL version="1.0.0"
LABEL description="Redis Deduplication component for UDP-to-RabbitMQ Gateway"
LABEL component="redis-deduplication"

# Health check (for runtime stages)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/usr/local/bin/simple_deduplication", "--health-check"] || exit 1